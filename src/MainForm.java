import javax.smartcardio.CardException;
import javax.smartcardio.CardTerminal;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigInteger;
import java.util.List;

/**
 * @author HP
 */
public class MainForm extends javax.swing.JFrame {


	JavaSmartcard javaCard;
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton add_button;
	private javax.swing.JButton connect_Button;
	private JTextField digit1_TextField;
	private JTextField digit2_TextField;
	private javax.swing.JButton divide_Button2;
	private javax.swing.JButton jButton1;
	private JLabel jLabel1;
	private JLabel jLabel2;
	private JLabel jLabel3;
	private JLabel jLabel4;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JButton mul_Button4;
	private javax.swing.JButton refresh_Button;
	private JLabel result_Label;
	private JLabel status_Label;
	private javax.swing.JButton substract_Button;
	private javax.swing.JComboBox terminals_ComboBox;

	public MainForm() {
		initComponents();
		javaCard = new JavaSmartcard();
		this.getContentPane().setBackground(Color.white);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
	    /* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

        /* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainForm().setVisible(true);
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		digit1_TextField = new JTextField();
		digit2_TextField = new JTextField();
		jLabel1 = new JLabel();
		jLabel2 = new JLabel();
		result_Label = new JLabel();
		substract_Button = new javax.swing.JButton();
		divide_Button2 = new javax.swing.JButton();
		add_button = new javax.swing.JButton();
		jLabel3 = new JLabel();
		connect_Button = new javax.swing.JButton();
		jSeparator1 = new javax.swing.JSeparator();
		status_Label = new JLabel();
		terminals_ComboBox = new javax.swing.JComboBox();
		mul_Button4 = new javax.swing.JButton();
		refresh_Button = new javax.swing.JButton();
		jLabel4 = new JLabel();
		jButton1 = new javax.swing.JButton();


		jButton1.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				testButtonAction(e);
			}
		});
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Smart Calculator");
		getContentPane().setLayout(new java.awt.GridBagLayout());
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridheight = 2;
		gridBagConstraints.ipadx = 41;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(40, 7, 0, 0);
		getContentPane().add(digit1_TextField, gridBagConstraints);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.gridheight = 2;
		gridBagConstraints.ipadx = 41;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(12, 7, 0, 0);
		getContentPane().add(digit2_TextField, gridBagConstraints);

		jLabel1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
		jLabel1.setText("Text to encrypt");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.ipadx = 7;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(44, 57, 0, 0);
		getContentPane().add(jLabel1, gridBagConstraints);

		jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
		jLabel2.setText("Text returned from card");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.ipadx = 11;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(16, 57, 0, 0);
		getContentPane().add(jLabel2, gridBagConstraints);

		result_Label.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 7;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.gridwidth = 7;
		gridBagConstraints.ipadx = 68;
		gridBagConstraints.ipady = 20;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(12, 28, 0, 0);
		getContentPane().add(result_Label, gridBagConstraints);

		substract_Button.setText("-");
		substract_Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				substract_ButtonActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 6;
		gridBagConstraints.gridwidth = 5;
		gridBagConstraints.ipadx = 60;
		gridBagConstraints.ipady = 14;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(52, 48, 0, 0);
		getContentPane().add(substract_Button, gridBagConstraints);

		divide_Button2.setText("/");
		divide_Button2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				divide_Button2ActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 7;
		gridBagConstraints.gridwidth = 5;
		gridBagConstraints.ipadx = 61;
		gridBagConstraints.ipady = 14;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(42, 48, 0, 0);
		getContentPane().add(divide_Button2, gridBagConstraints);

		add_button.setText("+");
		add_button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				add_buttonActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 6;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.ipadx = 58;
		gridBagConstraints.ipady = 14;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(52, 23, 0, 0);
		getContentPane().add(add_button, gridBagConstraints);

		jLabel3.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
		jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel3.setText("NAXOS protocol implementation");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 15;
		gridBagConstraints.ipadx = 29;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(19, 111, 0, 0);
		getContentPane().add(jLabel3, gridBagConstraints);

		connect_Button.setText("Connect");
		connect_Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				connect_ButtonActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 7;
		gridBagConstraints.gridy = 9;
		gridBagConstraints.gridwidth = 6;
		gridBagConstraints.gridheight = 2;
		gridBagConstraints.ipadx = 5;
		gridBagConstraints.ipady = -1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(19, 6, 6, 0);
		getContentPane().add(connect_Button, gridBagConstraints);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 8;
		gridBagConstraints.gridwidth = 29;
		gridBagConstraints.ipadx = 483;
		gridBagConstraints.ipady = 11;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(33, 9, 0, 0);
		getContentPane().add(jSeparator1, gridBagConstraints);

		status_Label.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 14;
		gridBagConstraints.gridy = 9;
		gridBagConstraints.gridwidth = 30;
		gridBagConstraints.gridheight = 2;
		gridBagConstraints.ipadx = 78;
		gridBagConstraints.ipady = 23;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(27, 9, 6, 6);
		getContentPane().add(status_Label, gridBagConstraints);

		terminals_ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"--select--"}));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 9;
		gridBagConstraints.gridwidth = 4;
		gridBagConstraints.ipadx = 95;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(21, 12, 0, 0);
		getContentPane().add(terminals_ComboBox, gridBagConstraints);

		mul_Button4.setText("*");
		mul_Button4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mul_Button4ActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 7;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.ipadx = 62;
		gridBagConstraints.ipady = 14;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(42, 23, 0, 0);
		getContentPane().add(mul_Button4, gridBagConstraints);

		refresh_Button.setText("Refresh");
		refresh_Button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				refresh_ButtonActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 9;
		gridBagConstraints.gridheight = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(18, 39, 6, 0);
		getContentPane().add(refresh_Button, gridBagConstraints);

		jLabel4.setText("Authors:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		getContentPane().add(jLabel4, gridBagConstraints);

		jButton1.setText("send to card");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
		getContentPane().add(jButton1, gridBagConstraints);

		getAccessibleContext().setAccessibleName("Smart Card Calculator");

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void testButtonAction(ActionEvent event) {
		String command = "00A4040007A0000002471201";
		byte[] apdu = JavaSmartcard.hexStringToByteArray(command);
		if (!selectApplet(apdu))
			return;

		command = "800000000948656C6C6F576F726CFF";
		apdu = JavaSmartcard.hexStringToByteArray(command);
		try {
			javaCard.sendApdu(apdu);
			byte[] data = javaCard.getData();
			result_Label.setText(JavaSmartcard.byteArrayToHexString(data));
		} catch (CardException e) {
			e.printStackTrace();
		}
	}

	private void substract_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_substract_ButtonActionPerformed

		String command = "00A404000E63616C63756C61746F722E61707000";
		byte[] apdu = JavaSmartcard.hexStringToByteArray(command);
		if (!selectApplet(apdu)) {
			return;
		}

		byte[] data_LC;
		try {
			data_LC = getLCData(this.digit1_TextField.getText(), this.digit2_TextField.getText());
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Only digits are allowed to input in the fields\n" + ex.getMessage(), "Type Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		command = "A001000002";

		String LC_Hex = JavaSmartcard.byteArrayToHexString(data_LC);

		command = command.concat(LC_Hex);

		apdu = JavaSmartcard.hexStringToByteArray(command);
		System.out.println("" + JavaSmartcard.htos(apdu));
		try {
			javaCard.sendApdu(apdu);
			byte[] data = javaCard.getData();

			this.status_Label.setText("" + Integer.toHexString(javaCard.getStatusWords()).toUpperCase());
			this.result_Label.setText(new BigInteger(data) + "");
		} catch (CardException | IllegalArgumentException ex) {
			JOptionPane.showMessageDialog(this, "Error while tried to send command APDU\n" + ex.getMessage() + "", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_substract_ButtonActionPerformed

	private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed

		String command = "00A404000E63616C63756C61746F722E61707000";
		byte[] apdu = JavaSmartcard.hexStringToByteArray(command);
		if (!selectApplet(apdu)) {
			return;
		}

		byte[] data_LC;
		try {
			data_LC = getLCData(this.digit1_TextField.getText(), this.digit2_TextField.getText());
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Only digits are allowed to input in the fields\n" + ex.getMessage(), "Type Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		command = "A000000002";

		String LC_Hex = JavaSmartcard.byteArrayToHexString(data_LC);

		command = command.concat(LC_Hex);

		apdu = JavaSmartcard.hexStringToByteArray(command);
		System.out.println("" + JavaSmartcard.htos(apdu));
		try {
			javaCard.sendApdu(apdu);
			byte[] data = javaCard.getData();

			this.status_Label.setText("" + Integer.toHexString(javaCard.getStatusWords()).toUpperCase());
			this.result_Label.setText(new BigInteger(data) + "");
		} catch (CardException | IllegalArgumentException ex) {
			JOptionPane.showMessageDialog(this, "Error while tried to send command APDU\n" + ex.getMessage() + "", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
		}

	}//GEN-LAST:event_add_buttonActionPerformed

	private byte[] getLCData(String byte1Str, String byte2Str) throws Exception {
		byte[] data_LC = new byte[2];
		byte byte1 = Byte.parseByte(byte1Str);
		byte byte2 = Byte.parseByte(byte2Str);
		data_LC[0] = byte1;
		data_LC[1] = byte2;

		return data_LC;
	}

	private boolean selectApplet(byte[] apdu) {
		boolean isSelected = false;
		try {
			javaCard.sendApdu(apdu);
			byte[] data = javaCard.getData();

			this.status_Label.setText("" + Integer.toHexString(javaCard.getStatusWords()).toUpperCase());
			this.result_Label.setText(new String(data));
			isSelected = true;
		} catch (CardException | IllegalArgumentException | NullPointerException ex) {
			JOptionPane.showMessageDialog(this, "Error while tried to Select calculator applet\n" + ex.getMessage() + "", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
			isSelected = false;
		}

		return isSelected;
	}

	private void divide_Button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divide_Button2ActionPerformed

		String command = "00A404000E63616C63756C61746F722E61707000";
		byte[] apdu = JavaSmartcard.hexStringToByteArray(command);
		if (!selectApplet(apdu)) {
			return;
		}

		byte[] data_LC;
		try {
			data_LC = getLCData(this.digit1_TextField.getText(), this.digit2_TextField.getText());
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Only digits are allowed to input in the fields\n" + ex.getMessage(), "Type Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		command = "A002000002";

		String LC_Hex = JavaSmartcard.byteArrayToHexString(data_LC);

		command = command.concat(LC_Hex);

		apdu = JavaSmartcard.hexStringToByteArray(command);
		System.out.println("" + JavaSmartcard.htos(apdu));
		try {
			javaCard.sendApdu(apdu);
			byte[] data = javaCard.getData();

			this.status_Label.setText("" + Integer.toHexString(javaCard.getStatusWords()).toUpperCase());
			this.result_Label.setText(new BigInteger(data) + "");
		} catch (CardException | IllegalArgumentException ex) {
			JOptionPane.showMessageDialog(this, "Error while tried to send command APDU\n" + ex.getMessage() + "", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_divide_Button2ActionPerformed

	private void connect_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect_ButtonActionPerformed

		if (this.terminals_ComboBox.getSelectedItem().equals("--select--")) {
			return;
		}
		CardTerminal cardReader = javaCard.getCardReader((String) this.terminals_ComboBox.getSelectedItem());
		try {
			javaCard.connectToCard(cardReader);
			this.status_Label.setText("Connected");
		} catch (CardException ex) {
			JOptionPane.showMessageDialog(this, "Problems while tried to connect with the smart card.\n" + ex.getMessage(), "Card Error", JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_connect_ButtonActionPerformed

	private void mul_Button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mul_Button4ActionPerformed

		String command = "00A404000E63616C63756C61746F722E61707000";
		byte[] apdu = JavaSmartcard.hexStringToByteArray(command);
		if (!selectApplet(apdu)) {
			return;
		}

		byte[] data_LC;
		try {
			data_LC = getLCData(this.digit1_TextField.getText(), this.digit2_TextField.getText());
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Only digits are allowed to input in the fields\n" + ex.getMessage(), "Type Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		command = "A003000002";

		String LC_Hex = JavaSmartcard.byteArrayToHexString(data_LC);

		command = command.concat(LC_Hex);

		apdu = JavaSmartcard.hexStringToByteArray(command);
		System.out.println("" + JavaSmartcard.htos(apdu));
		try {
			javaCard.sendApdu(apdu);
			byte[] data = javaCard.getData();

			this.status_Label.setText("" + Integer.toHexString(javaCard.getStatusWords()).toUpperCase());
			this.result_Label.setText(new BigInteger(data) + "");
		} catch (CardException | IllegalArgumentException ex) {
			JOptionPane.showMessageDialog(this, "Error while tried to send command APDU\n" + ex.getMessage() + "", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_mul_Button4ActionPerformed

	private void refresh_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_ButtonActionPerformed
		try {
			List<CardTerminal> terminals = javaCard.getTerminals();
			this.terminals_ComboBox.removeAllItems();
			for (int i = 0; i < terminals.size(); i++) {
				this.terminals_ComboBox.addItem(terminals.get(i).getName());
			}
		} catch (Exception ex) {

			JOptionPane.showMessageDialog(this, "Getting problems while tried to access terminal list\n" + ex.getMessage() + ".\nReresh agin or restart", "Coudl not get Terminals", JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_refresh_ButtonActionPerformed
	// End of variables declaration//GEN-END:variables
}
