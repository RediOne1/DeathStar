import javax.smartcardio.CardException;
import javax.smartcardio.CardTerminal;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigInteger;
import java.util.List;

import static javax.swing.GroupLayout.DEFAULT_SIZE;
import static javax.swing.GroupLayout.PREFERRED_SIZE;

/**
 * @author HP
 */
public class MainForm extends javax.swing.JFrame {


	JavaSmartcard javaCard;
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JButton add_button;
	private JButton connect_Button;
	private JTextField digit1_TextField;
	private JTextField digit2_TextField;
	private JButton divide_Button2;
	private JLabel jLabel1;
	private JLabel jLabel2;
	private JLabel jLabel3;
	private JSeparator jSeparator1;
	private JButton mul_Button4;
	private JButton refresh_Button;
	private JLabel result_Label;
	private JLabel status_Label;
	private JButton substract_Button;
	private JComboBox terminals_ComboBox;

	public MainForm() {
		initComponents();
		javaCard = new JavaSmartcard();
		this.getContentPane().setBackground(Color.white);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
	    /* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

        /* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainForm().setVisible(true);
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		digit1_TextField = new JTextField();
		digit2_TextField = new JTextField();
		jLabel1 = new JLabel();
		jLabel2 = new JLabel();
		result_Label = new JLabel();
		substract_Button = new JButton();
		divide_Button2 = new JButton();
		add_button = new JButton();
		jLabel3 = new JLabel();
		connect_Button = new JButton();
		jSeparator1 = new JSeparator();
		status_Label = new JLabel();
		terminals_ComboBox = new JComboBox();
		mul_Button4 = new JButton();
		refresh_Button = new JButton();

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		setTitle("Smart Calculator");

		digit1_TextField.setText("05");

		digit2_TextField.setText("05");

		jLabel1.setFont(new Font("Tahoma", 0, 13)); // NOI18N
		jLabel1.setText("Digit 1: ");

		jLabel2.setFont(new Font("Tahoma", 0, 13)); // NOI18N
		jLabel2.setText("Digit 2:");

		result_Label.setFont(new Font("Tahoma", 1, 14)); // NOI18N

		substract_Button.setText("-");
		substract_Button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				substract_ButtonActionPerformed(evt);
			}
		});

		divide_Button2.setText("/");
		divide_Button2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				divide_Button2ActionPerformed(evt);
			}
		});

		add_button.setText("+");
		add_button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				add_buttonActionPerformed(evt);
			}
		});

		jLabel3.setFont(new Font("DialogInput", 1, 18)); // NOI18N
		jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel3.setText("Mini Smart Card Calculator");

		connect_Button.setText("Connect");
		connect_Button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				connect_ButtonActionPerformed(evt);
			}
		});

		status_Label.setFont(new Font("Tahoma", 2, 14)); // NOI18N

		terminals_ComboBox.setModel(new DefaultComboBoxModel(new String[]{"--select--"}));

		mul_Button4.setText("*");
		mul_Button4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				mul_Button4ActionPerformed(evt);
			}
		});

		refresh_Button.setText("Refresh");
		refresh_Button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				refresh_ButtonActionPerformed(evt);
			}
		});

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addGap(107, 107, 107)
												.addComponent(jLabel3, PREFERRED_SIZE, 295, PREFERRED_SIZE))
										.addGroup(layout.createSequentialGroup()
												.addGap(173, 173, 173)
												.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
														.addComponent(jLabel1, DEFAULT_SIZE, 53, Short.MAX_VALUE)
														.addComponent(jLabel2, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE))
												.addGap(18, 18, 18)
												.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
														.addComponent(digit2_TextField, PREFERRED_SIZE, 55, PREFERRED_SIZE)
														.addComponent(digit1_TextField, PREFERRED_SIZE, 55, PREFERRED_SIZE))
												.addGap(53, 53, 53)
												.addComponent(result_Label, PREFERRED_SIZE, 68, PREFERRED_SIZE))
										.addGroup(layout.createSequentialGroup()
												.addGap(139, 139, 139)
												.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
														.addComponent(add_button, PREFERRED_SIZE, 98, PREFERRED_SIZE)
														.addComponent(mul_Button4, PREFERRED_SIZE, 98, PREFERRED_SIZE))
												.addGap(48, 48, 48)
												.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
														.addComponent(substract_Button, PREFERRED_SIZE, 98, PREFERRED_SIZE)
														.addComponent(divide_Button2, PREFERRED_SIZE, 98, PREFERRED_SIZE))))
								.addContainerGap(93, Short.MAX_VALUE))
						.addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
								.addGap(0, 9, Short.MAX_VALUE)
								.addComponent(jSeparator1, PREFERRED_SIZE, 484, PREFERRED_SIZE)
								.addGap(20, 20, 20))
						.addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
								.addGap(39, 39, 39)
								.addComponent(refresh_Button)
								.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(terminals_ComboBox, 0, DEFAULT_SIZE, Short.MAX_VALUE)
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(connect_Button, PREFERRED_SIZE, 87, PREFERRED_SIZE)
								.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(status_Label, PREFERRED_SIZE, 78, PREFERRED_SIZE)
								.addContainerGap())
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGap(19, 19, 19)
								.addComponent(jLabel3)
								.addGap(40, 40, 40)
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(digit1_TextField, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)
										.addComponent(jLabel1))
								.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(digit2_TextField, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)
										.addComponent(jLabel2)
										.addComponent(result_Label, PREFERRED_SIZE, 20, PREFERRED_SIZE))
								.addGap(52, 52, 52)
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(substract_Button, PREFERRED_SIZE, 46, PREFERRED_SIZE)
										.addComponent(add_button, PREFERRED_SIZE, 46, PREFERRED_SIZE))
								.addGap(42, 42, 42)
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(divide_Button2, PREFERRED_SIZE, 46, PREFERRED_SIZE)
										.addComponent(mul_Button4, PREFERRED_SIZE, 46, PREFERRED_SIZE))
								.addGap(33, 33, 33)
								.addComponent(jSeparator1, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
										.addGroup(GroupLayout.Alignment.TRAILING, layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
												.addComponent(connect_Button, PREFERRED_SIZE, 31, PREFERRED_SIZE)
												.addComponent(terminals_ComboBox, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)
												.addComponent(refresh_Button))
										.addComponent(status_Label, GroupLayout.Alignment.TRAILING, PREFERRED_SIZE, 23, PREFERRED_SIZE))
								.addContainerGap())
		);

		getAccessibleContext().setAccessibleName("Smart Card Calculator");

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void substract_ButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_substract_ButtonActionPerformed

		String command = "00A404000E63616C63756C61746F722E61707000";
		byte[] apdu = JavaSmartcard.hexStringToByteArray(command);
		if (!selectApplet(apdu)) {
			return;
		}

		byte[] data_LC;
		try {
			data_LC = getLCData(this.digit1_TextField.getText(), this.digit2_TextField.getText());
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Only digits are allowed to input in the fields\n" + ex.getMessage(), "Type Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		command = "A001000002";

		String LC_Hex = JavaSmartcard.byteArrayToHexString(data_LC);

		command = command.concat(LC_Hex);

		apdu = JavaSmartcard.hexStringToByteArray(command);
		System.out.println("" + JavaSmartcard.htos(apdu));
		try {
			javaCard.sendApdu(apdu);
			byte[] data = javaCard.getData();

			this.status_Label.setText("" + Integer.toHexString(javaCard.getStatusWords()).toUpperCase());
			this.result_Label.setText(new BigInteger(data) + "");
		} catch (CardException | IllegalArgumentException ex) {
			JOptionPane.showMessageDialog(this, "Error while tried to send command APDU\n" + ex.getMessage() + "", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_substract_ButtonActionPerformed

	private void add_buttonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed

		String command = "00A404000E63616C63756C61746F722E61707000";
		byte[] apdu = JavaSmartcard.hexStringToByteArray(command);
		if (!selectApplet(apdu)) {
			return;
		}

		byte[] data_LC;
		try {
			data_LC = getLCData(this.digit1_TextField.getText(), this.digit2_TextField.getText());
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Only digits are allowed to input in the fields\n" + ex.getMessage(), "Type Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		command = "A000000002";

		String LC_Hex = JavaSmartcard.byteArrayToHexString(data_LC);

		command = command.concat(LC_Hex);

		apdu = JavaSmartcard.hexStringToByteArray(command);
		System.out.println("" + JavaSmartcard.htos(apdu));
		try {
			javaCard.sendApdu(apdu);
			byte[] data = javaCard.getData();

			this.status_Label.setText("" + Integer.toHexString(javaCard.getStatusWords()).toUpperCase());
			this.result_Label.setText(new BigInteger(data) + "");
		} catch (CardException | IllegalArgumentException ex) {
			JOptionPane.showMessageDialog(this, "Error while tried to send command APDU\n" + ex.getMessage() + "", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
		}

	}//GEN-LAST:event_add_buttonActionPerformed

	private byte[] getLCData(String byte1Str, String byte2Str) throws Exception {
		byte[] data_LC = new byte[2];
		byte byte1 = Byte.parseByte(byte1Str);
		byte byte2 = Byte.parseByte(byte2Str);
		data_LC[0] = byte1;
		data_LC[1] = byte2;

		return data_LC;
	}

	private boolean selectApplet(byte[] apdu) {
		boolean isSelected = false;
		try {
			javaCard.sendApdu(apdu);
			byte[] data = javaCard.getData();

			this.status_Label.setText("" + Integer.toHexString(javaCard.getStatusWords()).toUpperCase());
			this.result_Label.setText(new String(data));
			isSelected = true;
		} catch (CardException | IllegalArgumentException | NullPointerException ex) {
			JOptionPane.showMessageDialog(this, "Error while tried to Select calculator applet\n" + ex.getMessage() + "", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
			isSelected = false;
		}

		return isSelected;
	}

	private void divide_Button2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_divide_Button2ActionPerformed

		String command = "00A404000E63616C63756C61746F722E61707000";
		byte[] apdu = JavaSmartcard.hexStringToByteArray(command);
		if (!selectApplet(apdu)) {
			return;
		}

		byte[] data_LC;
		try {
			data_LC = getLCData(this.digit1_TextField.getText(), this.digit2_TextField.getText());
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Only digits are allowed to input in the fields\n" + ex.getMessage(), "Type Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		command = "A002000002";

		String LC_Hex = JavaSmartcard.byteArrayToHexString(data_LC);

		command = command.concat(LC_Hex);

		apdu = JavaSmartcard.hexStringToByteArray(command);
		System.out.println("" + JavaSmartcard.htos(apdu));
		try {
			javaCard.sendApdu(apdu);
			byte[] data = javaCard.getData();

			this.status_Label.setText("" + Integer.toHexString(javaCard.getStatusWords()).toUpperCase());
			this.result_Label.setText(new BigInteger(data) + "");
		} catch (CardException | IllegalArgumentException ex) {
			JOptionPane.showMessageDialog(this, "Error while tried to send command APDU\n" + ex.getMessage() + "", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_divide_Button2ActionPerformed

	private void connect_ButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_connect_ButtonActionPerformed

		if (this.terminals_ComboBox.getSelectedItem().equals("--select--")) {
			return;
		}
		CardTerminal cardReader = javaCard.getCardReader((String) this.terminals_ComboBox.getSelectedItem());
		try {
			javaCard.connectToCard(cardReader);
			this.status_Label.setText("Connected");
		} catch (CardException ex) {
			JOptionPane.showMessageDialog(this, "Problems while tried to connect with the smart card.\n" + ex.getMessage(), "Card Error", JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_connect_ButtonActionPerformed

	private void mul_Button4ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_mul_Button4ActionPerformed

		String command = "00A404000E63616C63756C61746F722E61707000";
		byte[] apdu = JavaSmartcard.hexStringToByteArray(command);
		if (!selectApplet(apdu)) {
			return;
		}

		byte[] data_LC;
		try {
			data_LC = getLCData(this.digit1_TextField.getText(), this.digit2_TextField.getText());
		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, "Only digits are allowed to input in the fields\n" + ex.getMessage(), "Type Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		command = "A003000002";

		String LC_Hex = JavaSmartcard.byteArrayToHexString(data_LC);

		command = command.concat(LC_Hex);

		apdu = JavaSmartcard.hexStringToByteArray(command);
		System.out.println("" + JavaSmartcard.htos(apdu));
		try {
			javaCard.sendApdu(apdu);
			byte[] data = javaCard.getData();

			this.status_Label.setText("" + Integer.toHexString(javaCard.getStatusWords()).toUpperCase());
			this.result_Label.setText(new BigInteger(data) + "");
		} catch (CardException | IllegalArgumentException ex) {
			JOptionPane.showMessageDialog(this, "Error while tried to send command APDU\n" + ex.getMessage() + "", "APDU sending fail", JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_mul_Button4ActionPerformed

	private void refresh_ButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_refresh_ButtonActionPerformed
		try {
			List<CardTerminal> terminals = javaCard.getTerminals();
			this.terminals_ComboBox.removeAllItems();
			for (int i = 0; i < terminals.size(); i++) {
				this.terminals_ComboBox.addItem(terminals.get(i).getName());
			}
		} catch (Exception ex) {

			JOptionPane.showMessageDialog(this, "Getting problems while tried to access terminal list\n" + ex.getMessage() + ".\nReresh agin or restart", "Coudl not get Terminals", JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_refresh_ButtonActionPerformed
	// End of variables declaration//GEN-END:variables
}
